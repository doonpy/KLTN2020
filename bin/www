#!/usr/bin/env node

const numCPUs = require("os").cpus().length;
const cluster = require("cluster");
const {fork} = require("child_process");

if (numCPUs === 1) {
  startServer();
  require("../configs/scheduler-config");
} else {
  if (cluster.isMaster) {
    console.log(
        `=> [M${process.pid} - ${require("moment")().format("L LTS")}] Master ${
            process.pid
        } is running`
    );

    // Fork workers.
    for (let i = 0; i < numCPUs - 1; i++) {
      cluster.fork();
    }

    // Fork child process for scheduler
    let schedulerProcess = fork(require.resolve("../configs/scheduler-config"));

    schedulerProcess.on("exit", (code, signal) => {
      console.log(
        `=> [M${process.pid} - ${require("moment")().format(
          "L LTS"
        )}] Scheduler process died - code: ${code}`
      );
      schedulerProcess = fork(require.resolve("../configs/scheduler-config"));
    });

    cluster.on("exit", (worker, code, signal) => {
      console.log(
          `=> [M${process.pid} - ${require("moment")().format("L LTS")}] Worker ${
              worker.process.pid
          } died`
      );
      cluster.fork();
    });
  } else {
    startServer();
  }
}

function startServer() {
  /**
   * Module dependencies.
   */

  var app = require("../app");
  var debug = require("debug")("crawl-extract:server");
  var http = require("http");

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);
  require("../configs/socket-server").init(server);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
  }

  console.log(
      `=> [W${process.pid} - ${require("moment")().format("L LTS")}] Worker ${
          process.pid
      } started`
  );
}
